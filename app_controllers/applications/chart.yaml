metadata {
  name: "defectdojo"
  version: "0.1.0"
  description: "A Helm chart for Kubernetes"
  apiVersion: "v1"
  appVersion: "1.0"
}
templates {
  name: "templates/django-ingress.yaml"
  data: "{{- if .Values.django.ingress.enabled -}}\n{{- $fullName := include \"defectdojo.fullname\" . -}}\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: {{ $fullName }}\n  labels:\n    defectdojo.org/component: django\n    app.kubernetes.io/name: {{ include \"defectdojo.name\" . }}\n    app.kubernetes.io/instance: {{ .Release.Name }}\n    app.kubernetes.io/managed-by: {{ .Release.Service }}\n    helm.sh/chart: {{ include \"defectdojo.chart\" . }}\n{{- with .Values.django.ingress.annotations }}\n  annotations:\n{{ toYaml . | indent 4 }}\n{{- end }}\nspec:\n  tls:\n    - hosts:\n        - {{ .Values.host }}\n    {{- if .Values.django.ingress.secretName }}\n      secretName: {{ .Values.django.ingress.secretName }}\n    {{- end }}\n  rules:\n    - host: {{ .Values.host }}\n      http:\n        paths:\n          - path: /\n            backend:\n              serviceName: {{ $fullName }}-django\n              servicePort: http\n{{- end }}\n"
}
templates {
  name: "templates/django-service.yaml"
  data: "{{- $fullName := include \"defectdojo.fullname\" . -}}\napiVersion: v1\nkind: Service\nmetadata:\n  name: {{ $fullName }}-django\n  labels:\n    defectdojo.org/component: django\n    app.kubernetes.io/name: {{ include \"defectdojo.name\" . }}\n    app.kubernetes.io/instance: {{ .Release.Name }}\n    app.kubernetes.io/managed-by: {{ .Release.Service }}\n    helm.sh/chart: {{ include \"defectdojo.chart\" . }}\nspec:\n  selector:\n    defectdojo.org/component: django\n    app.kubernetes.io/name: {{ include \"defectdojo.name\" . }}\n    app.kubernetes.io/instance: {{ .Release.Name }}\n  ports:\n  - name: http\n    protocol: TCP\n    port: 80\n    targetPort: 8080\n"
}
templates {
  name: "templates/NOTES.txt"
  data: "{{- $fullName := include \"defectdojo.fullname\" . -}}\nDefectDojo has been installed.\n{{ if .Values.django.ingress.enabled }}\nTo use it, go to <https://{{ .Values.host }}>.\n{{ else }}\nTo be able to access it, set up an ingress or access the service directly by\nrunning the following command:\n\n    kubectl port-forward --namespace={{ .Release.Namespace }} \\\n      service/{{ .Release.Name }}-django 8080:80\n{{ if ne \"localhost\" .Values.host }}\nAs you set your host value to {{ .Values.host }}, make sure that it resolves to\nthe localhost IP address, e.g. by adding the following two lines to /etc/hosts:\n\n    ::1       {{ .Values.host }}\n    127.0.0.1 {{ .Values.host }}\n{{ end }}\nTo access DefectDojo, go to <http://{{ .Values.host }}:8080>.\n{{ end }}\nLog in with username {{ .Values.admin.user}}.\nTo find out the password, run the following command:\n\n    echo \"DefectDojo {{ .Values.admin.user}} password: $(kubectl \\\n      get secret defectdojo \\\n      --namespace={{ .Release.Namespace }} \\\n      --output jsonpath=\'{.data.DD_ADMIN_PASSWORD}\' \\\n      | base64 --decode)\"\n"
}
templates {
  name: "templates/celery-deployment.yaml"
  data: "{{- $fullName := include \"defectdojo.fullname\" . -}}\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{ $fullName }}-celery\n  labels:\n    defectdojo.org/component: celery\n    app.kubernetes.io/name: {{ include \"defectdojo.name\" . }}\n    app.kubernetes.io/instance: {{ .Release.Name }}\n    app.kubernetes.io/managed-by: {{ .Release.Service }}\n    helm.sh/chart: {{ include \"defectdojo.chart\" . }}\nspec:\n  replicas: {{ .Values.celery.replicas }}\n  selector:\n    matchLabels:\n      defectdojo.org/component: celery\n      app.kubernetes.io/name: {{ include \"defectdojo.name\" . }}\n      app.kubernetes.io/instance: {{ .Release.Name }}\n  template:\n    metadata:\n      labels:\n        defectdojo.org/component: celery\n        app.kubernetes.io/name: {{ include \"defectdojo.name\" . }}\n        app.kubernetes.io/instance: {{ .Release.Name }}\n    spec:\n      containers:\n        - name: celery\n          image: \"{{ .Values.celery.repository }}:{{ .Values.tag }}\"\n          imagePullPolicy: {{ .Values.imagePullPolicy }}\n          envFrom:\n            - configMapRef:\n                name: {{ $fullName }}\n          env:\n            - name: DD_CELERY_BROKER_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: {{ $fullName }}-{{ .Values.celery.broker }}\n                  key: {{ .Values.celery.broker }}-password\n            - name: DD_DATABASE_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: {{ $fullName }}-{{ .Values.database }}\n                  key: {{ .Values.database }}-password\n          resources:\n            {{- toYaml .Values.celery.resources | nindent 12 }}\n      {{- with .Values.celery.nodeSelector }}\n      nodeSelector:\n        {{- toYaml . | nindent 8 }}\n      {{- end }}\n    {{- with .Values.celery.affinity }}\n      affinity:\n        {{- toYaml . | nindent 8 }}\n    {{- end }}\n    {{- with .Values.celery.tolerations }}\n      tolerations:\n        {{- toYaml . | nindent 8 }}\n    {{- end }}\n"
}
templates {
  name: "templates/celery-worker-deployment.yaml"
  data: "{{- $fullName := include \"defectdojo.fullname\" . -}}\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{ $fullName }}-celery-worker\n  labels:\n    defectdojo.org/component: celery\n    app.kubernetes.io/name: {{ include \"defectdojo.name\" . }}\n    app.kubernetes.io/instance: {{ .Release.Name }}\n    app.kubernetes.io/managed-by: {{ .Release.Service }}\n    helm.sh/chart: {{ include \"defectdojo.chart\" . }}\nspec:\n  replicas: {{ .Values.celery.worker.replicas }}\n  selector:\n    matchLabels:\n      defectdojo.org/component: celery\n      app.kubernetes.io/name: {{ include \"defectdojo.name\" . }}\n      app.kubernetes.io/instance: {{ .Release.Name }}\n  template:\n    metadata:\n      labels:\n        defectdojo.org/component: celery\n        app.kubernetes.io/name: {{ include \"defectdojo.name\" . }}\n        app.kubernetes.io/instance: {{ .Release.Name }}\n    spec:\n      containers:\n        - name: celery\n          image: \"{{ .Values.celery.repository }}:{{ .Values.tag }}\"\n          imagePullPolicy: {{ .Values.imagePullPolicy }}\n          command: [\'/entrypoint-celery-worker.sh\']\n          envFrom:\n            - configMapRef:\n                name: {{ $fullName }}\n          env:\n            - name: DD_CELERY_BROKER_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: {{ $fullName }}-{{ .Values.celery.broker }}\n                  key: {{ .Values.celery.broker }}-password\n            - name: DD_DATABASE_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: {{ $fullName }}-{{ .Values.database }}\n                  key: {{ .Values.database }}-password\n          resources:\n            {{- toYaml .Values.celery.worker.resources | nindent 12 }}\n      {{- with .Values.celery.worker.nodeSelector }}\n      nodeSelector:\n        {{- toYaml . | nindent 8 }}\n      {{- end }}\n    {{- with .Values.celery.worker.affinity }}\n      affinity:\n        {{- toYaml . | nindent 8 }}\n    {{- end }}\n    {{- with .Values.celery.worker.tolerations }}\n      tolerations:\n        {{- toYaml . | nindent 8 }}\n    {{- end }}\n"
}
templates {
  name: "templates/configmap.yaml"
  data: "{{- $fullName := include \"defectdojo.fullname\" . -}}\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ $fullName }}\n  labels:\n    app.kubernetes.io/name: {{ include \"defectdojo.name\" . }}\n    app.kubernetes.io/instance: {{ .Release.Name }}\n    app.kubernetes.io/managed-by: {{ .Release.Service }}\n    helm.sh/chart: {{ include \"defectdojo.chart\" . }}\ndata:\n  DD_ADMIN_USER: {{ .Values.admin.user | default \"admin\" }}\n  DD_ADMIN_MAIL: {{ .Values.admin.Mail | default \"admin@defectdojo.local\" }}\n  DD_ADMIN_FIRST_NAME: {{ .Values.admin.FirstName | default \"Admin\" }}\n  DD_ADMIN_LAST_NAME: {{ .Values.admin.LastName | default \"User\" }}\n  DD_ALLOWED_HOSTS: {{ .Values.host }}\n  DD_CELERY_BROKER_SCHEME: {{ if eq .Values.celery.broker \"rabbitmq\" }}amqp{{ end }}{{ if eq .Values.celery.broker \"redis\" }}redis{{ end }}\n  DD_CELERY_BROKER_USER: \'{{ if eq .Values.celery.broker \"rabbitmq\" }}user{{ end }}\'\n  DD_CELERY_BROKER_HOST: {{ $fullName }}-{{ if eq .Values.celery.broker \"rabbitmq\" }}rabbitmq{{ end }}{{ if eq .Values.celery.broker \"redis\" }}redis-master{{ end }}\n  DD_CELERY_BROKER_PORT: \'{{ if eq .Values.celery.broker \"rabbitmq\" }}5672{{ end }}{{ if eq .Values.celery.broker \"redis\" }}6379{{ end }}\'\n  DD_CELERY_LOG_LEVEL: {{ .Values.celery.logLevel }}\n  DD_DATABASE_ENGINE: django.db.backends.{{ if eq .Values.database \"postgresql\" }}postgresql_psycopg2{{ end }}{{ if eq .Values.database \"mysql\" }}mysql{{ end }}\n  DD_DATABASE_HOST: {{ $fullName }}-{{ .Values.database }}\n  DD_DATABASE_PORT: \'{{ if eq .Values.database \"postgresql\" }}{{ .Values.postgresql.service.port }}{{ end }}{{ if eq .Values.database \"mysql\" }}3306{{ end }}\'\n  DD_DATABASE_USER: {{ if eq .Values.database \"postgresql\" }}{{ .Values.postgresql.postgresqlUsername }}{{ end }}{{ if eq .Values.database \"mysql\" }}{{ .Values.mysql.mysqlUser }}{{ end }}\n  DD_INITIALIZE: \'{{ .Values.initializer.run }}\'\n  DD_UWSGI_ENDPOINT: /run/uwsgi.sock\n  DD_UWSGI_HOST: localhost\n  DD_UWSGI_PASS: unix:///run/uwsgi.sock\n"
}
templates {
  name: "templates/_helpers.tpl"
  data: "{{/* vim: set filetype=mustache: */}}\n{{/*\nExpand the name of the chart.\n*/}}\n{{- define \"defectdojo.name\" -}}\n{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix \"-\" -}}\n{{- end -}}\n\n{{/*\nCreate a default fully qualified app name.\nWe truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).\nIf release name contains chart name it will be used as a full name.\n*/}}\n{{- define \"defectdojo.fullname\" -}}\n{{- if .Values.fullnameOverride -}}\n{{- .Values.fullnameOverride | trunc 63 | trimSuffix \"-\" -}}\n{{- else -}}\n{{- $name := default .Chart.Name .Values.nameOverride -}}\n{{- if contains $name .Release.Name -}}\n{{- .Release.Name | trunc 63 | trimSuffix \"-\" -}}\n{{- else -}}\n{{- printf \"%s-%s\" .Release.Name $name | trunc 63 | trimSuffix \"-\" -}}\n{{- end -}}\n{{- end -}}\n{{- end -}}\n\n{{/*\nCreate chart name and version as used by the chart label.\n*/}}\n{{- define \"defectdojo.chart\" -}}\n{{- printf \"%s-%s\" .Chart.Name .Chart.Version | replace \"+\" \"_\" | trunc 63 | trimSuffix \"-\" -}}\n{{- end -}}\n"
}
templates {
  name: "templates/django-deployment.yaml"
  data: "{{- $fullName := include \"defectdojo.fullname\" . -}}\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{ $fullName }}-django\n  labels:\n    defectdojo.org/component: django\n    app.kubernetes.io/name: {{ include \"defectdojo.name\" . }}\n    app.kubernetes.io/instance: {{ .Release.Name }}\n    app.kubernetes.io/managed-by: {{ .Release.Service }}\n    helm.sh/chart: {{ include \"defectdojo.chart\" . }}\nspec:\n  replicas: {{ .Values.django.replicas }}\n  selector:\n    matchLabels:\n      defectdojo.org/component: django\n      app.kubernetes.io/name: {{ include \"defectdojo.name\" . }}\n      app.kubernetes.io/instance: {{ .Release.Name }}\n  template:\n    metadata:\n      labels:\n        defectdojo.org/component: django\n        app.kubernetes.io/name: {{ include \"defectdojo.name\" . }}\n        app.kubernetes.io/instance: {{ .Release.Name }}\n    spec:\n      volumes:\n        - name: run\n          emptyDir: {}\n      containers:\n        - name: uwsgi\n          image: \'{{ .Values.django.uwsgi.repository }}:{{ .Values.tag }}\'\n          imagePullPolicy: {{ .Values.imagePullPolicy }}\n          volumeMounts:\n            - name: run\n              mountPath: /run\n          envFrom:\n            - configMapRef:\n                name: {{ $fullName }}\n          env:\n            - name: DD_CELERY_BROKER_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: {{ $fullName }}-{{ .Values.celery.broker }}\n                  key: {{ .Values.celery.broker }}-password\n            - name: DD_DATABASE_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: {{ $fullName }}-{{ .Values.database }}\n                  key: {{ .Values.database }}-password\n          resources:\n            {{- toYaml .Values.django.uwsgi.resources | nindent 12 }}\n        - name: nginx\n          image: \'{{ .Values.django.nginx.repository }}:{{ .Values.tag }}\'\n          imagePullPolicy: {{ .Values.imagePullPolicy }}\n          volumeMounts:\n            - name: run\n              mountPath: /run\n          ports:\n            - name: http\n              containerPort: 8080\n              protocol: TCP\n          envFrom:\n            - configMapRef:\n                name: {{ $fullName }}\n          livenessProbe:\n            httpGet:\n              path: /\n              port: http\n              httpHeaders:\n                - name: Host\n                  value: {{ .Values.host }}\n            initialDelaySeconds: 120\n            periodSeconds: 10\n            failureThreshold: 6\n          readinessProbe:\n            httpGet:\n              path: /\n              port: http\n              httpHeaders:\n                - name: Host\n                  value: {{ .Values.host }}\n            initialDelaySeconds: 120\n            periodSeconds: 10\n            failureThreshold: 12\n          resources:\n            {{- toYaml .Values.django.nginx.resources | nindent 12 }}\n      {{- with .Values.nodeSelector }}\n      nodeSelector:\n        {{- toYaml . | nindent 8 }}\n      {{- end }}\n    {{- with .Values.django.affinity }}\n      affinity:\n        {{- toYaml . | nindent 8 }}\n    {{- end }}\n    {{- with .Values.django.tolerations }}\n      tolerations:\n        {{- toYaml . | nindent 8 }}\n    {{- end }}\n"
}
templates {
  name: "templates/celery-beat-deployment.yaml"
  data: "{{- $fullName := include \"defectdojo.fullname\" . -}}\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{ $fullName }}-celery-beat\n  labels:\n    defectdojo.org/component: celery\n    app.kubernetes.io/name: {{ include \"defectdojo.name\" . }}\n    app.kubernetes.io/instance: {{ .Release.Name }}\n    app.kubernetes.io/managed-by: {{ .Release.Service }}\n    helm.sh/chart: {{ include \"defectdojo.chart\" . }}\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      defectdojo.org/component: celery\n      app.kubernetes.io/name: {{ include \"defectdojo.name\" . }}\n      app.kubernetes.io/instance: {{ .Release.Name }}\n  template:\n    metadata:\n      labels:\n        defectdojo.org/component: celery\n        app.kubernetes.io/name: {{ include \"defectdojo.name\" . }}\n        app.kubernetes.io/instance: {{ .Release.Name }}\n    spec:\n      containers:\n        - name: celery\n          image: \"{{ .Values.celery.repository }}:{{ .Values.tag }}\"\n          imagePullPolicy: {{ .Values.imagePullPolicy }}\n          command: [\'/entrypoint-celery-beat.sh\']\n          envFrom:\n            - configMapRef:\n                name: {{ $fullName }}\n          env:\n            - name: DD_CELERY_BROKER_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: {{ $fullName }}-{{ .Values.celery.broker }}\n                  key: {{ .Values.celery.broker }}-password\n            - name: DD_DATABASE_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: {{ $fullName }}-{{ .Values.database }}\n                  key: {{ .Values.database }}-password\n          resources:\n            {{- toYaml .Values.celery.beat.resources | nindent 12 }}\n      {{- with .Values.celery.beat.nodeSelector }}\n      nodeSelector:\n        {{- toYaml . | nindent 8 }}\n      {{- end }}\n    {{- with .Values.celery.beat.affinity }}\n      affinity:\n        {{- toYaml . | nindent 8 }}\n    {{- end }}\n    {{- with .Values.celery.beat.tolerations }}\n      tolerations:\n        {{- toYaml . | nindent 8 }}\n    {{- end }}\n"
}
templates {
  name: "templates/secret.yaml"
  data: "{{- if .Values.createSecret -}}\n{{- $fullName := include \"defectdojo.fullname\" . -}}\napiVersion: v1\nkind: Secret\nmetadata:\n  name: {{ $fullName }}\n  labels:\n    app.kubernetes.io/name: {{ include \"defectdojo.name\" . }}\n    app.kubernetes.io/instance: {{ .Release.Name }}\n    app.kubernetes.io/managed-by: {{ .Release.Service }}\n    helm.sh/chart: {{ include \"defectdojo.chart\" . }}\n  annotations:\n    helm.sh/resource-policy: keep\ntype: Opaque\ndata:\n  DD_ADMIN_PASSWORD: {{ randAlphaNum 22 | b64enc | quote }}\n  DD_SECRET_KEY: {{ randAlphaNum 32 | b64enc | quote }}\n  DD_CREDENTIAL_AES_256_KEY: {{ randAlphaNum 32 | b64enc | quote }}\n{{- end }}\n"
}
templates {
  name: "templates/initializer-job.yaml"
  data: "{{- $fullName := include \"defectdojo.fullname\" . -}}\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: {{ .Release.Name }}-initializer\n  labels:\n    defectdojo.org/component: initializer\n    app.kubernetes.io/name: {{ include \"defectdojo.name\" . }}\n    app.kubernetes.io/instance: {{ .Release.Name }}\n    app.kubernetes.io/managed-by: {{ .Release.Service }}\n    helm.sh/chart: {{ include \"defectdojo.chart\" . }}\nspec:\n  ttlSecondsAfterFinished: {{ .Values.initializerKeepSeconds }}\n  template:\n    metadata:\n      labels:\n        defectdojo.org/component: initializer\n        app.kubernetes.io/name: {{ include \"defectdojo.name\" . }}\n        app.kubernetes.io/instance: {{ .Release.Name }}\n    spec:\n      containers:\n        - name: initializer\n          image: \"{{ .Values.initializer.repository }}:{{ .Values.tag }}\"\n          imagePullPolicy: {{ .Values.imagePullPolicy }}\n          command: [\'/entrypoint-initializer.sh\']\n          envFrom:\n            - configMapRef:\n                name: {{ $fullName }}\n            - secretRef:\n                name: {{ $fullName }}\n          env:\n            - name: DD_DATABASE_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: {{ $fullName }}-{{ .Values.database }}\n                  key: {{ .Values.database }}-password\n          resources:\n            {{- toYaml .Values.initializer.resources | nindent 10 }}\n      restartPolicy: Never\n  backoffLimit: 1\n"
}
templates {
  name: "templates/tests/unit-tests.yaml"
  data: "{{- $fullName := include \"defectdojo.fullname\" . -}}\napiVersion: v1\nkind: Pod\nmetadata:\n  name: {{ include \"defectdojo.fullname\" . }}-unit-tests\n  labels:\n    app.kubernetes.io/name: {{ include \"defectdojo.name\" . }}\n    helm.sh/chart: {{ include \"defectdojo.chart\" . }}\n    app.kubernetes.io/instance: {{ .Release.Name }}\n    app.kubernetes.io/managed-by: {{ .Release.Service }}\n  annotations:\n    helm.sh/hook: test-success\nspec:\n  containers:\n    - name: unit-tests\n      image: \'{{ .Values.django.uwsgi.repository }}:{{ .Values.tag }}\'\n      imagePullPolicy: {{ .Values.imagePullPolicy }}\n      command: [\'/entrypoint-unit-tests.sh\']\n      envFrom:\n        - configMapRef:\n            name: {{ $fullName }}\n      env:\n        - name: DD_DATABASE_USER\n          value: {{ if eq .Values.database \"postgresql\" }}{{ .Values.postgresql.postgresqlUsername }}{{ end }}{{ if eq .Values.database \"mysql\" }}root{{ end }}\n        - name: DD_CELERY_BROKER_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: {{ $fullName }}-{{ .Values.celery.broker }}\n              key: {{ .Values.celery.broker }}-password\n        - name: DD_DATABASE_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: {{ $fullName }}-{{ .Values.database }}\n              key: {{ if eq .Values.database \"postgresql\" }}{{ .Values.database }}-password{{ end }}{{ if eq .Values.database \"mysql\" }}{{ .Values.database }}-root-password{{ end }}\n        - name: DD_DEBUG\n          value: \'on\'\n  restartPolicy: Never\n"
}
values {
  raw: "---\n# Global settings\ncreateSecret: true\ndatabase: mysql\nhost: defectdojo.default.minikube.local\nimagePullPolicy: Always\ntag: latest\n\nadmin:\n  user: admin\n  firstName: Administrator\n  lastName: User\n  mail: admin@defectdojo.local\n\n# Components\ncelery:\n  broker: rabbitmq\n  repository: defectdojo/defectdojo-django\n  logLevel: DEBUG\n  beat:\n    affinity: {}\n    nodeSelector: {}\n    resources:\n      requests:\n        cpu: 100m\n        memory: 128Mi\n    tolerations: []\n  worker:\n    affinity: {}\n    repository: defectdojo/defectdojo-django\n    logLevel: DEBUG\n    nodeSelector: {}\n    replicas: 1\n    resources:\n      requests:\n        cpu: 100m\n        memory: 128Mi\n    tolerations: []\n\ndjango:\n  affinity: {}\n  ingress:\n    enabled: true\n    secretName: defectdojo-tls\n    annotations:\n      kubernetes.io/ingress.class: nginx\n  nginx:\n    repository: defectdojo/defectdojo-nginx\n    resources:\n      requests:\n        cpu: 100m\n        memory: 128Mi\n  nodeSelector: {}\n  replicas: 1\n  tolerations: []\n  uwsgi:\n    repository: defectdojo/defectdojo-django\n    resources:\n      requests:\n        cpu: 100m\n        memory: 128Mi\n\ninitializer:\n  run: true\n  repository: defectdojo/defectdojo-django\n  keepSeconds: 60\n  resources:\n    requests:\n      cpu: 100m\n      memory: 128Mi\n\nmysql:\n  enabled: true\n  mysqlUser: defectdojo\n  mysqlDatabase: defectdojo\n\npostgresql:\n  enabled: false\n  postgresqlUsername: defectdojo\n  postgresqlDatabase: defectdojo\n  persistence:\n    enabled: false\n  replication:\n    enabled: false\n\nrabbitmq:\n  enabled: true\n  replicas: 1\n\nredis:\n  enabled: false\n  cluster:\n    slaveCount: 1\n"
}
files {
  type_url: "requirements.yaml"
  value: "dependencies:\n  - name: mysql\n    version: 0.15.0\n    repository: https://kubernetes-charts.storage.googleapis.com/\n    condition: mysql.enabled\n  - name: postgresql\n    version: 3.11.7\n    repository: https://kubernetes-charts.storage.googleapis.com/\n    condition: postgresql.enabled\n  - name: rabbitmq\n    version: 4.3.1\n    repository: https://kubernetes-charts.storage.googleapis.com/\n    condition: rabbitmq.enabled\n  - name: redis\n    version: 6.1.4\n    repository: https://kubernetes-charts.storage.googleapis.com/\n    condition: redis.enabled\n"
}
files {
  type_url: "README.md"
  value: "# defectdojo\nhelm chart\n"
}
files {
  type_url: "requirements.lock"
  value: "dependencies:\n- name: mysql\n  repository: https://kubernetes-charts.storage.googleapis.com/\n  version: 0.15.0\n- name: postgresql\n  repository: https://kubernetes-charts.storage.googleapis.com/\n  version: 3.11.7\n- name: rabbitmq\n  repository: https://kubernetes-charts.storage.googleapis.com/\n  version: 4.3.1\n- name: redis\n  repository: https://kubernetes-charts.storage.googleapis.com/\n  version: 6.1.4\ndigest: sha256:efc2c8d717d0bd0fbc6fceca36390af3ad590d66fd8ef7b496633a93c0b502ab\ngenerated: 2019-03-08T15:00:39.862499+01:00\n"
}
files {
  type_url: "templates/tests/unit-tests.yaml"
  value: "{{- $fullName := include \"defectdojo.fullname\" . -}}\napiVersion: v1\nkind: Pod\nmetadata:\n  name: {{ include \"defectdojo.fullname\" . }}-unit-tests\n  labels:\n    app.kubernetes.io/name: {{ include \"defectdojo.name\" . }}\n    helm.sh/chart: {{ include \"defectdojo.chart\" . }}\n    app.kubernetes.io/instance: {{ .Release.Name }}\n    app.kubernetes.io/managed-by: {{ .Release.Service }}\n  annotations:\n    helm.sh/hook: test-success\nspec:\n  containers:\n    - name: unit-tests\n      image: \'{{ .Values.django.uwsgi.repository }}:{{ .Values.tag }}\'\n      imagePullPolicy: {{ .Values.imagePullPolicy }}\n      command: [\'/entrypoint-unit-tests.sh\']\n      envFrom:\n        - configMapRef:\n            name: {{ $fullName }}\n      env:\n        - name: DD_DATABASE_USER\n          value: {{ if eq .Values.database \"postgresql\" }}{{ .Values.postgresql.postgresqlUsername }}{{ end }}{{ if eq .Values.database \"mysql\" }}root{{ end }}\n        - name: DD_CELERY_BROKER_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: {{ $fullName }}-{{ .Values.celery.broker }}\n              key: {{ .Values.celery.broker }}-password\n        - name: DD_DATABASE_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: {{ $fullName }}-{{ .Values.database }}\n              key: {{ if eq .Values.database \"postgresql\" }}{{ .Values.database }}-password{{ end }}{{ if eq .Values.database \"mysql\" }}{{ .Values.database }}-root-password{{ end }}\n        - name: DD_DEBUG\n          value: \'on\'\n  restartPolicy: Never\n"
}
files {
  type_url: ".git/config"
  value: "[core]\n\trepositoryformatversion = 0\n\tfilemode = true\n\tbare = false\n\tlogallrefupdates = true\n\tignorecase = true\n\tprecomposeunicode = true\n[remote \"origin\"]\n\turl = https://github.com/securethebox/defectdojo.git\n\tfetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\n\tremote = origin\n\tmerge = refs/heads/master\n"
}
files {
  type_url: ".git/HEAD"
  value: "ref: refs/heads/master\n"
}
files {
  type_url: ".git/description"
  value: "Unnamed repository; edit this file \'description\' to name the repository.\n"
}
files {
  type_url: ".git/index"
  value: "DIRC\000\000\000\002\000\000\000\021]/=\022+]/=\022+\001\000\000\004\001\007\000\000\000\000\001\000\000\000\024\000\000\000\005~VSPm\000tD\032K\001F+\037\000\nChart.yaml\000\000\000\000\000\000\000\000]/=\022]/=\022\001\000\000\004\001\010\000\000\000\000\001\000\000\000\024\000\000\000\030X\036Kk*\001J.2\000\tREADME.md\000]/=\022k]/=\022k\001\000\000\004\001\t\000\000\000\000\001\000\000\000\024\000\000\002\020$eUMr\rh<!U\0234\017l\000\021requirements.lock\000]/=\022\016V]/=\022\016V\001\000\000\004\001\n\000\000\000\000\001\000\000\000\024\000\000\002( &PX\004EN\0106\000\021requirements.yaml\000]/=\022i]/=\022i\001\000\000\004\001\014\000\000\000\000\001\000\000\000\024\000\000\0040H\317\230\007\036p6%\027\000\023templates/NOTES.txt\000\000\000\000\000\000\000]/=\022]/=\022\001\000\000\004\001\r\000\000\000\000\001\000\000\000\024\000\000\004\036f\014)+\334\255\013\016 \023\000\026templates/_helpers.tpl\000\000\000\000]/=\022o]/=\022o\001\000\000\004\001\016\000\000\000\000\001\000\000\000\024\000\000\007Q\022gN%<g>\"-\000%templates/celery-beat-deployment.yaml\000\000\000\000\000]/=\022j\030]/=\022j\030\001\000\000\004\001\017\000\000\000\000\001\000\000\000\024\000\000\007\021U@\037x\001Sxr,0\000 templates/celery-deployment.yaml\000\000]/=\022\007]/=\022\007\001\000\000\004\001\020\000\000\000\000\001\000\000\000\024\000\000\010\036!]O8.\000n\032Bk\024\000\'templates/celery-worker-deployment.yaml\000\000\000]/=\022\000]/=\022\000\001\000\000\004\001\021\000\000\000\000\001\000\000\000\024\000\000\007\034.v\005f\034;k\037\002/TT\000\000\030templates/configmap.yaml\000\000]/=\022=]/=\022=\001\000\000\004\001\022\000\000\000\000\001\000\000\000\024\000\000\014g+S#\036Q\036K\0021\000 templates/django-deployment.yaml\000\000]/=\022\032]/=\022\032\001\000\000\004\001\023\000\000\000\000\001\000\000\000\024\000\000\0038`|\177\313\2357\004\302\224?T[\000\035templates/django-ingress.yaml\000\000\000\000\000]/=\022]/=\022\001\000\000\004\001\024\000\000\000\000\001\000\000\000\024\000\000\00204.]O\"\006\021\022q9\307\204\000\035templates/django-service.yaml\000\000\000\000\000]/=\022.Z]/=\022.Z\001\000\000\004\001\025\000\000\000\000\001\000\000\000\024\000\000\005@\004N\016:-z\035D\014yH`\000\036templates/initializer-job.yaml\000\000\000\000]/=\022\021]/=\022\021\001\000\000\004\001\026\000\000\000\000\001\000\000\000\024\000\000\002/\"\314\202aACA=?\023\000\025templates/secret.yaml\000\000\000\000\000]/=\022\013h]/=\022\013h\001\000\000\004\001\030\000\000\000\000\001\000\000\000\024\000\000\005$\026q#XvI4\016jb\000\037templates/tests/unit-tests.yaml\000\000\000]/=\022@k]/=\022@k\001\000\000\004\001\031\000\000\000\000\001\000\000\000\024\000\000\006P\\akt\317\227nJS\000\013values.yaml\000\000\000\000\000\000\000TREE\000\000\000[\00017 1\n\006)k\334\243X+gJ\"templates\00012 1\n1\314\226&/a\010\031-tests\0001 0\nk0ch\326\2351f\177L`@\t:}@\007M\027%\021\307\270\021\017x\010+\030"
}
files {
  type_url: ".git/packed-refs"
  value: "# pack-refs with: peeled fully-peeled sorted \nce1a7d896a438514c6015e906fa81b7665db278b refs/remotes/origin/master\n"
}
files {
  type_url: ".git/objects/9b/a4b46b30a5a36385be68d69d31667f4c6040f4"
  value: "x\001+)JMU01f040031Q(,-I-.)\326\253LaP9wQlB2/&|YI\001\023\007"
}
files {
  type_url: ".git/objects/9b/005da0917b48c05a3c70ffa40b8a6af1ab5ba4"
  value: "x\001+)JMU06g040031Q\010rutuMa\034g\0247_Mb3Z\006\000HN\020"
}
files {
  type_url: ".git/objects/05/9b907e5653a8506d00b074441a4b0146a42b1f"
  value: "x\001E;\016 \020\005Ss\017\000pC.R|\026\310\260\010\010\\?v$\315\223F\0323;\031r9<@IALIyb\016-!q\033\021K\003O\005/%a\312\222G\034=owG\005{~l\345\252\204\030c\313\251\"UxO\037\336\2607"
}
files {
  type_url: ".git/objects/d7/21b95dc6e54f382e00ab6ee91a98eb86426b14"
  value: "x\001Un@\020\355\231\257XJ944\003)4AP\n\003lw\335\205\010Q=3u0\002z)7vvf{f\035:f7>~X\003qHG\0010DH\023pC+Y\310\202\315\246s\014J\"v\327\255TIzzr\014\034OQ1Jzl\002\001)U\034\014Jy\014y\335\265vrl\304\212%\035\0271\030\005\016l(ug\337\250\306\216\0022\026RY\307\225(C-\321\234+>$W[\021\024\031Yhg\0351\006I\024M\010QR\031\034\004iaPR)-?tT\013\021Bpw@i\021p\024Bf\334\211\331\2036sMu)wP\"\014DA\317\262\010]<\034eD*n~@hT3\0055:\013\312\255L\307\214\014\r\0256z$\033\347\254\255\321\256p\322\221\027w|\'\"\003\333\201F,m\033T5E\032A\322\270\312\277:ofk\\}WWf\337\214*nT, \0239!L1gP=?Q1,ZO\t\353\215\277\037\303\227?\034\017\317\247aCD\005*(dA\030pjDv\004[\t^_l4>]u\001>PW}Jskq\032ld{\035\007?zc|\316\243nbe\021\004O/<K|y/SyA;\n\022\025xnv$]\004F[X%|,^*nJv\007\'zD*hONyYGc\035~m;o|\033"
}
files {
  type_url: ".git/objects/fc/fa518312a3674e25883c67993efd22ec2daef1"
  value: "x\001UMo@\020_Br)\351\245\262\003)4L**^ak.D3\r^@/;\315\233$\tn\016l\347\267\274\000\026}fR|\002\353\246\220pC+wY\310\202\315\246K\000J\"\\4bC(s*@N\001\030#^{6@@\016f\025$\035<\334\2227c^nm=R+\014\032\nu|QRi\332\2325ScTq%B\030\026[UL\025B\032$m{{\030R=p\006y\021YO\314\270&\nV\030\022\004qaP)X\037,\026%6\025K\005wbvv\"qm\315\237C]\033-\034\024e\035\324\225{\332\240aOS<\010ocC\025\010\034\n\327\241j\316\202ZX1YZ\"E\001\017<_l+\020\347\254\255\321\256pgw|\'\335\255f \032Q\013Mv\302\255FW\322\237\027=\\&*T_C//\025W3\n\024P\317\231~e\014\331\241\t4J?de\014\036vt\r/Q8G~0\036^E\024`I\035E&\013\302\200Uke\026xtH97C_B[MzPp}p5\030G\177t#\'x\326\232\326\225\001\027F\'}\"\024\037yT9](\0320\006J/\010$\335\254\025t\n\026l i-\016/\327\247\006G\036_3,J:z3i|\035G6)\177\014=n"
}
files {
  type_url: ".git/objects/ed/66c8cd0cf929ef852bd1f8dcadcc0b0e2013f8"
  value: "x\001SMO0\0209b\024\025P%P\0258iCUi@c$Tc`k7\013[$>N\336\274i\017\001P?\003\014\014j\304\263>xV\022gppP$TnT\003^\"X#\014ZR9\r\0165Y2~n3\t^B%D\002P0syH\\2\001 o9\020]-~#Akz$(\021gs\021T2!\032:\030A\031\322\204\035q\024uq]4R!\036\032lU\010~~\006EFK\034\03482\020S \017mqd\177\037\335\257\037\032\034\032TTrk\007\313\212\027A\341\226\214\020\305\243(\002\311\274\\n&Lz\033t\ru\302\2243R7T5;\333\206jc6R_E\t\006GG5{%e7qnFm`\032\021\310\275MK\023G`S_a(\0324/XS\177E\'W\0338{Qm\\%wm?Jhc"
}
files {
  type_url: ".git/objects/20/80a326c05058fb0445ed4ebb9908fad0e2c936"
  value: "x\001]\0160\014q=E/@\001\005Mv5\017\\\t\027\032y5ML\331\240m\017;M#yM3b\017P\004v~\003)\t^@uUE\032\003\024$`HidQ)\021\027 cbyA}\010%9\032.2_&9\344\245\262?\010s\"~\034Gk<oxV0Q*e%\r\316\230%\330\232o\tklx\026\003?b"
}
files {
  type_url: ".git/objects/11/5540d2cb1f78d7e59101d65378f4a7722c9830"
  value: "x\001U0\020\355\231\257\030^\023D6R\017lPm\'8\023pI6\020!\t1K\320\262\0333yo<;I\022\030~a\013c\007V D_AHS~\031r*t>\020=V\'F(\031\001+K3\014{+!\010Xj[\002-KeQ\017#<>\336\272t\022\r\035\004`^\014*J%]\010\307\201@:A-\321\242\t\032\034\0217\035u8\026X&y1\035/f0| I.\024L\005A=Lv\010~,\\b^f9K\020N.,LNK?|FD\010\\E8*])X0\313\227W%{d\177KXE35s2(\027*o\ro\016o\002,\030p%-\023\335\222j4\005=La\000Q8\'Ew\010p\335\272MG^\336\262\017~LM*g\332\224u\003@\\S\001|\327\252hyR\"\t2\030\034zG}S({hzZ\014?\036\317\277M\'6~h6\030Q~\316\213R\006F{Nf\027\005x%JZ>\025o\n.\tJf\314\213\tmov4M\013vh\351\256\2514\032\034=#@\025g\002\003}\025\rO-\027|\021vN\024gK\326\236|t\017\346\246\255\023(&p\te7D\007\022*c}5M\005\t/~`"
}
files {
  type_url: ".git/objects/89/5a8836ac3ce48149817d83a20014bad667f0da"
  value: "x\001}r@\020E+f\031$`*Ny\307\274d\020\302\226w\003\014\017~H\010|IxJon\325\255{\027\021\0226\0015P)T\005\024J\004%\020L\022*P2M\004\032J!\0259z\032\007%\033{\035Ui`p_7=k>\024GM\003\010\022Z\n\020A$@\336\216\007z>\032\013{/\351\220\247hD7\035\325\2677u\007_\003\034\006-0\030{g\305\243NQv\0247\'c4^{z%~\t\023\317\201a\027i\025\033l3uR>\037\335\203\\\036W|\\4>\004\016$,Q\002)=^-/U\024\\p\\e1\007v]|03{=Xm-j4#\007l\"cIs\014RS\024X\013UcgIYxmE\035@swUr PT0h\024/ \017d:P\022,+u\016# @;l\032I\025eN]3\003\013wYg>j/~bt_\002yA\032\021:A<p/`}uF\1777\306\231u>\004_\033kn}"
}
files {
  type_url: ".git/objects/38/60db7c7f96cb9d37e0ee8404c2943f54915bb4"
  value: "x\001}Sn0\0149OA\024ZF]f`\017K1@\036i\310\224aAwh9\020(\0176\026}9\034*[0\030&J=#\033)%Cm \007\314\257){\t\037\331\206\0218\332\222\025\027{7`\"\034#Gn\336\204X~mIv\032Y6}9\024l6\000\332\244a\0059\000\004l)$\000XqW\017\"cNa0I@\037sk\002Ng0\177=\'AM0WO>qGjgI\007\032_=\027v\024zv8f\021Y5K9\nz^\330\255\002M(H|>f\037\031e\333\251/c\032\310\252rr.&YFci@A\016o\022\331\221dm\034%V5\027`\002-\n\327\277z\t\002t\"CY&U2t+a*MC\r*i~-}F\324\225p*TE3\034j#K_Q\307\255TG\010\003N+y"
}
files {
  type_url: ".git/objects/30/fb342ea25d9e4f22069511127139899bc784ea"
  value: "x\001QMk0\0149B]t00{)]\304\255c\031->;\356\276\243x\037j-|\030\032\036\007k8\02070N\331\203&Xh\332\222Jw,\n2\000\0014U\027hI8>U{\343\264\204\017\nG\032(\306\204\002($\tx#1M\336\2418\026[\034\002q\032\305\203gG.I\003b\177h)8J\024ps\\$~\t:y\024d\t#uO\316\200\016;u=\'/\304\236 b\337\250\036C\016;pFKY.zRm\0379o}J~\007NJ\\mN|+u9\017\tCGis^\017W{"
}
files {
  type_url: ".git/objects/06/296bdca39158f7fc2b9f83c667eeab4af7e522"
  value: "x\001+)JMU021`040031QpH,*\321\253La`=.,xE@.\303\206\022\027)oF%PUA.z)\014#\"\tZ^zFW\336\200**J-,,JM+)OfPI\r-]~^u\033P+&\007s)\006[\320\260X@@o\026\327\267~gr\350\244\231\001\020(\026$\0263gxf\332\254_\037?\'>\343\223\244.\304\234bOL=dZ\016>|\023\000|a"
}
files {
  type_url: ".git/objects/bf/be31cc96269afaf1f28d2f61cbc6fc08f2192d"
  value: "x\001+)JMU051a040031Q\017q\r+(axr~9]o\']+8gb\325\222\026Uq\324\234\324\242b\034i\'|\337\252}\307\235g\024\177@%\026U&&\350\246\244\026WU&0\025,8O&}_7>jC!\030p|\023\031\005W|Y^3\000UGy~Qvj\021U\025w\036{o\307\260:\324\214mN\"0yi\351\271\211\005\020Gm+cM9m-~Hb^\312\224\304\274|\014?k\035\334\257,\027Y{b\003S!\314\274b\005\026\tk\352\247\235k]\013\313\241)!\023*/N-*LN(7m(v\022TAB[^Aged&dV\001=\004Q\313\217oVUm.<\036\022\332\240SRa\337\243tL\334\227M=]o\034m\355\205\217\030\000BIjqI1%[\r.Nn\335\227qmaZO\027\000"
}
files {
  type_url: ".git/objects/d3/58fcbe941ee1d94bea906b2a014a2e32a3a9d8"
  value: "x\001KOR02aPVHIMKM.IHUHH,*\002\000\024\nl"
}
files {
  type_url: ".git/objects/b7/1c2e7605661ccb3b6b1fb202e52f5454a3008d"
  value: "x\001Un0\0243_aI}\302\254FUIKKE\013Jh%r\022\003.\035\033c\004L\025/(s\317\271\022Q\036\336\207\325\252\003>N\nJ=b\n\010i`N\004y\302\2379L\001\0042$ykNX\0077MtVs\034[\000hX\037V\"\000\000\"L~\003\000ep^DX0c\t\t\032T\tM\021\024#\r\036\305\244)N:\321\262TkP\001\026/$6\031)n<C\"/lRXfrF\014\0065\030:^\020~U\021BEIJ\030,$\026\037P]G\005A]\t6\330\241\r!\"\025[m\307\210\036:~0\016=kh7P\022!e5MVzHZY\\A\031q\036G8127ol\177w{L\000^\000ief-0\022|\026(H.t9.2\025C\022E=\r\t\032%\364\203\201\251Qky.cM\036<k\"(u\032[\316\273=\313\235TMIW\"OrwtE+;\013]\336\277\025\030P>u\013&E\003kl][\035\336\235\'\317\210M9L\"\030x!>\013\034\005\002\332\231JT`([e\314\263\033v$r/\037F\000ln\010\313\215Rib\020\007>-\022T\021{\017f\\[ht\036S\00062\333\277\tD!\rOVgx\330\261\\J] Jb\001E\024pc)sT\006#SwNo9%Px^V/U.^x{+P\033`O=\017\000d"
}
files {
  type_url: ".git/objects/b7/5c9093616b9b7496c3cf976e844abcab53c3d9"
  value: "x\001UK@\014<b$\034*\023@{\001\022\023$n3nKAw<4M\037hAZNco\334\222|j2V@c\0106^U\016!gP\"\032\002oH}c/\032X\037x*\020)L[c*8%iHtdm/\t^\005h\nMR\007Bi\035=B\347\243\234\tZ)zn\030\037\034\004v\"y%D\014-\030#\337\215Pu knl\006\016\t6+\035RA\007eiB\0215{#E\004>sR?m8a\003>y\177u\177\tm)\326\260\\\n I~\006\313\265\020J\026Kst\025.(UDad8k]cY-\031\333\217&[\003KC\020\014[_/_.5\'PsMj^2`\020\004\\?:SkGrfO\035Z(\t^6\334\251i4@cZ\016=\331\240uR(\022\032O+4i\033c\021<4\0279\010\024N\021|c\026\027\322\2030@GL\0270\033\020\327\2622LFp\033:~AGu\0309Lv2^\004r/ou\327\222R:B\022\016\022.<J\336\235\332\274F\013g\005t^ \n!\016w5z\001ep\003y\'&Q\016k_I`\327\213\'xkV\0167^\021\006"
}
files {
  type_url: ".git/objects/f0/672bacdb538f231e5181f6831e4b9180028331"
  value: "x\001Wk0\020s\nQ\006}d0a\017i\323\255\037\013ISQKF$\013]v\"\307\232\016\030o]:z>t:w//M~KyS`\'&T$\030Q\014c\\t@v#\026b\007cV!Yf[vc*T\034\036dRSP1w<l0F!{yR-\026F#\034\031j3iE:\315\264Brg4#0\n\034@*.\025vN)\030\014@\002\020\022%{cR\004hl\0255\0043\023*0\001\0066iE\t7X\004r\013Jb:AD\\\030RD\026sc\005\tAe+Y\004\0349m\n\006S\332\243@Rw\021\026Zw\305\277F4A\334\223\014=\013 m\013]7V\nc\021y\nY6Rt\030=a\013m2\026iP_\005)V\005v\"p\004Cv\n\002YzL\0259\n%\034U}lF\325\225.\\Y\n\021.Jot,\025zdI\311\273]\022V\njt]zq\0212\026\033\r`\\}IV-Ye5\007Uz\035\016}\035<b\03156.2Y\014+D\007[{\010\314\203S0uj~P\177\315\220f\306\255}&ug\337\250v\010ay\336\2732`un\" bN?T2`\n\027\025\023*D\036;l\017vX\315\276FM\313\274\332\2114cXNONO6<2\014y\337\263Nb\006\n\033=*\006\177\001Wot\306\262bx\310\231H\010!\033\006\022x\\\033\024A_%KmF\034S\023tUF^B\t\'! 1nvNk\006Fxm[\\]h>zp\014M\332\235\032Ko$Uz$z\026.Y!c\030RO\327\212\307\2307Nq\001*\016?\017xL2_\\\034TN\016\027lo%\t|\320\237"
}
files {
  type_url: ".git/objects/ce/1a7d896a438514c6015e906fa81b7665db278b"
  value: "x\001QN0\014D)|\"\'i\023GB\0107\022Wp\035\002\032e\005i4\'v\034o\003\002\350\252\200)VXB-7\tki\024%-\022\344\256\247\001T\026&%B>W\034\020r\032Vv56q|I;\302\235\\;O,f\037K\335\204{K\016\036s(\036&\314\210N~\304\207\343\245\253TFwM\003v}\003;^[w"
}
files {
  type_url: ".git/objects/48/e4cf98ce07baed911ed670ce36a8aaa4842517"
  value: "x\001ok0\020\332\237\010n\020+N\031k0 7+\014lHrBwr#`\013\023s=50Ml1\\\326\267r\316\2411\024HaW$\021#\020\020vQ\326\2072\016A-\035\344\210\206\353\234\227Z\022v\013M\t\035:T$\032SYtN9g\001|#\034BP\021xK\'\023V\030kr?9\177_#\004P&{\035\036\026d\007d\021\034uS 3\317\221l\010\361\222\264\246MWj%J\010y\017-Y\037d7*\000\305\265y\0365J\"OyT\320\271D\316\211`\314\222t\034\031\336\201B@\037p\036xD\013\007\324\261\017o\013: \017H\001a%\030@g9q\001/\032\035WDvps\007R1\004s\n\007@7\327\200\tb\022\006q\007li:\r9\0372\026\t%p\r)%i^\014%\007u>S\306\200M`=\033T\306\210\020Dgp!u7G+\333\220Uc`.X\004\323\254\177\001d\n\027o\007\rx\016\013\313\257\323\267x\177/\016-_c\310\264\313\255PKelwyl\013rlt\005)|7~\003\336\222i"
}
files {
  type_url: ".git/objects/24/65554d720da7d5de68d73c215513d4340fc16c"
  value: "x\001Kn \020D)G\rp\\OQ\001\022in\037&\027\360\262\244\252TQ,Y1M\017#@MW{>\006B*^KiX3vlM\355\215\266`\"XJ|9S\034\323\265R\311\232\000e\0137Xf-\324\217?fzI\rS\023/)S5i\030\034w_z\010\031!\002\023\002/e\033JJ!\022\016\002!bj:zM805\030ab\006BMYO`W\036\000a?"
}
files {
  type_url: ".git/objects/24/ced1169af5877123587649f4340e8b6a8962cf"
  value: "x\001TM0\020_aEr(\036C\036FUUU\t\006l6Y(\030),f\007$H\'ouQ,i\t$@\030O:\0032`\013\304\223\010Lc}D\002N\036#H\004\017a\031B\022W\0314\0101\r!9\036x:5g\327\240\306\202&P(\003A\010`_\' 9`9`bW\313\222AQ\006j7IwT]UCvd\\i\323\226N\020C\001TA4\r\0342?i\316\203]\032\344\201\245r.4({x\'>$F\021_i\nJy\324\210\n)\177+o\320\260g%.\0201Z\020<\322\242F\'s\021/*gJ(lE\330\273iog\t-\n\023\022\005K-\033w\036.j%K\024\000Ss<\001eS\tugeN\000~$E1_i\025\303\266{oj.\003B\020|e,ff:<\0165X\007J-N&p\026\021*s\t\030!F]!\017\n\332\246\002\002\0366\000^6\026W\n]\333\257Gc%\177l]\024oV}p7-k\021\rA\005\004}\007\315\215\003B=)\\6A\"\036dg5\036_Q^\334\232=B\316\221\316\216$:\032C&uJ@\017Qu&a\010\320\271\336\223ep\013G\021gWpq\036\013n]L]\001\0335\r"
}
files {
  type_url: ".git/objects/8c/2f22cecc829de98261418c8a43ec413d3f13c5"
  value: "x\001OK@\020=S\014kRm\017\001\017PTx\n\324\254nM~w7\037\004i\027f\177yl&T\006m]+^P4T{\"4=\r\315\257W\0201\004\035pD\023\014rZ\0213P^7v>\000P\027j\017\033geA)`\006}\007c|ho\016\022@`F^\000\336\272\311\250dl@gRS^\022emP AX\027w\312\224(r7iTB\325\2263X(\030\002+\323\277vMv(2hlU}O\"\025\325\252\030Z\t\316\254H;fmMC\316\2510Li\026A\027a]\003\013\022F#l:&e(sLm$_D!zY*,xL(IG4E2j\002\\%"
}
files {
  type_url: ".git/objects/40/04ba4e0eb7a0c53a2d7a1d86440c7948ba6086"
  value: "x\001TM0\020_1\n\016(\022\007\026E\020B+\307\231\035nQ)4\326\245Y[23~\033Om\016\027_>\023xZn\025\025B\nzS \014\013,Q~)\r\305\207Br8\014DyeM\006\010r5\332\216\007ke\014|Pa\020\010\"\033\000pY\006=s(<G!QF\005%Q{\000[jk\320\204k\000D]M`@*;zq \nsY\017\037\021K,|wsn$B\013B]~5+\t)12SQ !\005Jk\n?)\003k\022fU007u`\007j-\0026\010sb@\r\1776SI ql\035Hy\034\003P\025_am\nH,J\nbI\17741Z\021F9\032+\006\306\206,r5v*\023\'Ar5Bv:q\022f_{Q\317\261<q\013o|\022(\035*1;\335\247d~6Y,>}O#.\014\345\271\275d\304\241\0336\010$2wON\\s\032\317\215Zx\335\272\"j\326\241\033\'1\032/fE \rQ[\005?b$a\020\003nnnq{\334\202k[ThG\007\000_e"
}
files {
  type_url: ".git/info/exclude"
  value: "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with \'#\' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n# *.[oa]\n# *~\n"
}
files {
  type_url: ".git/logs/HEAD"
  value: "0000000000000000000000000000000000000000 ce1a7d896a438514c6015e906fa81b7665db278b Charles Chong <charleschong@Charless-MacBook-Pro.local> 1572155197 -0700\tclone: from https://github.com/securethebox/defectdojo.git\n"
}
files {
  type_url: ".git/logs/refs/heads/master"
  value: "0000000000000000000000000000000000000000 ce1a7d896a438514c6015e906fa81b7665db278b Charles Chong <charleschong@Charless-MacBook-Pro.local> 1572155197 -0700\tclone: from https://github.com/securethebox/defectdojo.git\n"
}
files {
  type_url: ".git/logs/refs/remotes/origin/HEAD"
  value: "0000000000000000000000000000000000000000 ce1a7d896a438514c6015e906fa81b7665db278b Charles Chong <charleschong@Charless-MacBook-Pro.local> 1572155197 -0700\tclone: from https://github.com/securethebox/defectdojo.git\n"
}
files {
  type_url: ".git/hooks/commit-msg.sample"
  value: "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n# commit.  The hook is allowed to edit the commit message file.\n#\n# To enable this hook, rename this file to \"commit-msg\".\n\n# Uncomment the below to add a Signed-off-by line to the message.\n# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n \'s/^\\(.*>\\).*$/Signed-off-by: \\1/p\')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep \'^Signed-off-by: \' \"$1\" |\n\t sort | uniq -c | sed -e \'/^[ \t]*1[ \t]/d\')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n"
}
files {
  type_url: ".git/hooks/pre-rebase.sample"
  value: "#!/bin/sh\n#\n# Copyright (c) 2006, 2008 Junio C Hamano\n#\n# The \"pre-rebase\" hook is run just before \"git rebase\" starts doing\n# its job, and can prevent the command from running by exiting with\n# non-zero status.\n#\n# The hook is called with the following parameters:\n#\n# $1 -- the upstream the series was forked from.\n# $2 -- the branch being rebased (or empty when rebasing the current branch).\n#\n# This sample shows how to prevent topic branches that are already\n# merged to \'next\' branch from getting rebased, because allowing it\n# would result in rebasing already published history.\n\npublish=next\nbasebranch=\"$1\"\nif test \"$#\" = 2\nthen\n\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n\t;;\n*)\n\texit 0 ;# we do not interrupt others.\n\t;;\nesac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n\n# Is topic fully merged to master?\nnot_in_master=`git rev-list --pretty=oneline ^master \"$topic\"`\nif test -z \"$not_in_master\"\nthen\n\techo >&2 \"$topic is fully merged to master; better remove it.\"\n\texit 1 ;# we could allow it, but there is no point.\nfi\n\n# Is topic ever merged to next?  If so you should not be rebasing it.\nonly_next_1=`git rev-list ^master \"^$topic\" ${publish} | sort`\nonly_next_2=`git rev-list ^master           ${publish} | sort`\nif test \"$only_next_1\" = \"$only_next_2\"\nthen\n\tnot_in_topic=`git rev-list \"^$topic\" master`\n\tif test -z \"$not_in_topic\"\n\tthen\n\t\techo >&2 \"$topic is already up to date with master\"\n\t\texit 1 ;# we could allow it, but there is no point.\n\telse\n\t\texit 0\n\tfi\nelse\n\tnot_in_next=`git rev-list --pretty=oneline ^${publish} \"$topic\"`\n\t/usr/bin/perl -e \'\n\t\tmy $topic = $ARGV[0];\n\t\tmy $msg = \"* $topic has commits already merged to public branch:\\n\";\n\t\tmy (%not_in_next) = map {\n\t\t\t/^([0-9a-f]+) /;\n\t\t\t($1 => 1);\n\t\t} split(/\\n/, $ARGV[1]);\n\t\tfor my $elem (map {\n\t\t\t\t/^([0-9a-f]+) (.*)$/;\n\t\t\t\t[$1 => $2];\n\t\t\t} split(/\\n/, $ARGV[2])) {\n\t\t\tif (!exists $not_in_next{$elem->[0]}) {\n\t\t\t\tif ($msg) {\n\t\t\t\t\tprint STDERR $msg;\n\t\t\t\t\tundef $msg;\n\t\t\t\t}\n\t\t\t\tprint STDERR \" $elem->[1]\\n\";\n\t\t\t}\n\t\t}\n\t\' \"$topic\" \"$not_in_next\" \"$not_in_master\"\n\texit 1\nfi\n\n<<\\DOC_END\n\nThis sample hook safeguards topic branches that have been\npublished from being rewound.\n\nThe workflow assumed here is:\n\n * Once a topic branch forks from \"master\", \"master\" is never\n   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n   branches, merge them into \"next\" branch.\n\nThe script, being an example, hardcodes the publish branch name\nto be \"next\", but it is trivial to make it configurable via\n$GIT_DIR/config mechanism.\n\nWith this workflow, you would want to know:\n\n(1) ... if a topic branch has ever been merged to \"next\".  Young\n    topic branches can have stupid mistakes you would rather\n    clean up before publishing, and things that have not been\n    merged into other branches can be easily rebased without\n    affecting other people.  But once it is published, you would\n    not want to rewind it.\n\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet\'s look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n\t\t /   a---a---b A     /           /\n\t\t/   /               /           /\n\t       /   /   c---c---c---c B         /\n\t      /   /   /             \\         /\n\t     /   /   /   b---b C     \\       /\n\t    /   /   /   /             \\     /\n    ---o---o---o---o---o---o---o---o---o---o---o \"master\"\n\n\nA, B and C are topic branches.\n\n * A has one fix since it was merged up to \"next\".\n\n * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\nDOC_END\n"
}
files {
  type_url: ".git/hooks/pre-commit.sample"
  value: "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n# If you want to allow non-ASCII filenames set this variable to true.\nallownonascii=$(git config --bool hooks.allownonascii)\n\n# Redirect output to stderr.\nexec 1>&2\n\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it\'s\n\t# even required, for portability to Solaris 10\'s /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d \'[ -~]\\0\' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n\nTo be portable it is advisable to rename the file.\n\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n"
}
files {
  type_url: ".git/hooks/applypatch-msg.sample"
  value: "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n# appropriate message if it wants to stop the commit.  The hook is\n# allowed to edit the commit message file.\n#\n# To enable this hook, rename this file to \"applypatch-msg\".\n\n. git-sh-setup\ncommitmsg=\"$(git rev-parse --git-path hooks/commit-msg)\"\ntest -x \"$commitmsg\" && exec \"$commitmsg\" ${1+\"$@\"}\n:\n"
}
files {
  type_url: ".git/hooks/fsmonitor-watchman.sample"
  value: "#!/usr/bin/perl\n\nuse strict;\nuse warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 1) and a time in nanoseconds\n# formatted as a string and outputs to stdout all files that have been\n# modified since the given time. Paths must be relative to the root of\n# the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n# \'git config core.fsmonitor .git/hooks/query-watchman\'\n#\nmy ($version, $time) = @ARGV;\n\n# Check the hook interface version\n\nif ($version == 1) {\n\t# convert nanoseconds to seconds\n\t$time = int $time / 1000000000;\n} else {\n\tdie \"Unsupported query-fsmonitor hook version \'$version\'.\\n\" .\n\t    \"Falling back to scanning...\\n\";\n}\n\nmy $git_work_tree;\nif ($^O =~ \'msys\' || $^O =~ \'cygwin\') {\n\t$git_work_tree = Win32::GetCwd();\n\t$git_work_tree =~ tr/\\\\/\\//;\n} else {\n\trequire Cwd;\n\t$git_work_tree = Cwd::cwd();\n}\n\nmy $retry = 1;\n\nlaunch_watchman();\n\nsub launch_watchman {\n\n\tmy $pid = open2(\\*CHLD_OUT, \\*CHLD_IN, \'watchman -j --no-pretty\')\n\t    or die \"open2() failed: $!\\n\" .\n\t    \"Falling back to scanning...\\n\";\n\n\t# In the query expression below we\'re asking for names of files that\n\t# changed since $time but were not transient (ie created after\n\t# $time but no longer exist).\n\t#\n\t# To accomplish this, we\'re using the \"since\" generator to use the\n\t# recency index to select candidate nodes and \"fields\" to limit the\n\t# output to file names only. Then we\'re using the \"expression\" term to\n\t# further constrain the results.\n\t#\n\t# The category of transient files that we want to ignore will have a\n\t# creation clock (cclock) newer than $time_t value and will also not\n\t# currently exist.\n\n\tmy $query = <<\"\tEND\";\n\t\t[\"query\", \"$git_work_tree\", {\n\t\t\t\"since\": $time,\n\t\t\t\"fields\": [\"name\"],\n\t\t\t\"expression\": [\"not\", [\"allof\", [\"since\", $time, \"cclock\"], [\"not\", \"exists\"]]]\n\t\t}]\n\tEND\n\n\tprint CHLD_IN $query;\n\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\tdie \"Watchman: command returned no output.\\n\" .\n\t    \"Falling back to scanning...\\n\" if $response eq \"\";\n\tdie \"Watchman: command returned invalid output: $response\\n\" .\n\t    \"Falling back to scanning...\\n\" unless $response =~ /^\\{/;\n\n\tmy $json_pkg;\n\teval {\n\t\trequire JSON::XS;\n\t\t$json_pkg = \"JSON::XS\";\n\t\t1;\n\t} or do {\n\t\trequire JSON::PP;\n\t\t$json_pkg = \"JSON::PP\";\n\t};\n\n\tmy $o = $json_pkg->new->utf8->decode($response);\n\n\tif ($retry > 0 and $o->{error} and $o->{error} =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\tprint STDERR \"Adding \'$git_work_tree\' to watchman\'s watch list.\\n\";\n\t\t$retry--;\n\t\tqx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch \'$git_work_tree\'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won\'t pay\n\t\t# the cost in git to look up each individual file.\n\t\tprint \"/\\0\";\n\t\teval { launch_watchman() };\n\t\texit 0;\n\t}\n\n\tdie \"Watchman: $o->{error}.\\n\" .\n\t    \"Falling back to scanning...\\n\" if $o->{error};\n\n\tbinmode STDOUT, \":utf8\";\n\tlocal $, = \"\\0\";\n\tprint @{$o->{files}};\n}\n"
}
files {
  type_url: ".git/hooks/pre-receive.sample"
  value: "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with \'echoback=\'\n# and rejects all pushes when the \"reject\" push option is used.\n#\n# To enable this hook, rename this file to \"pre-receive\".\n\nif test -n \"$GIT_PUSH_OPTION_COUNT\"\nthen\n\ti=0\n\twhile test \"$i\" -lt \"$GIT_PUSH_OPTION_COUNT\"\n\tdo\n\t\teval \"value=\\$GIT_PUSH_OPTION_$i\"\n\t\tcase \"$value\" in\n\t\techoback=*)\n\t\t\techo \"echo from the pre-receive-hook: ${value#*=}\" >&2\n\t\t\t;;\n\t\treject)\n\t\t\texit 1\n\t\tesac\n\t\ti=$((i + 1))\n\tdone\nfi\n"
}
files {
  type_url: ".git/hooks/prepare-commit-msg.sample"
  value: "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message\'s source.  The hook\'s purpose is to edit the commit\n# message file.  If the hook fails with a non-zero status,\n# the commit is aborted.\n#\n# To enable this hook, rename this file to \"prepare-commit-msg\".\n\n# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn\'t cope with --amend or with squashed\n# commits.\n#\n# The third example adds a Signed-off-by line to the message, that can\n# still be edited.  This is rarely a good idea.\n\nCOMMIT_MSG_FILE=$1\nCOMMIT_SOURCE=$2\nSHA1=$3\n\n/usr/bin/perl -i.bak -ne \'print unless(m/^. Please enter the commit message/..m/^#$/)\' \"$COMMIT_MSG_FILE\"\n\n# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe \'\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0\' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n \'s/^\\(.*>\\).*$/Signed-off-by: \\1/p\')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe \'print \"\\n\" if !$first_line++\' \"$COMMIT_MSG_FILE\"\n# fi\n"
}
files {
  type_url: ".git/hooks/post-update.sample"
  value: "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n"
}
files {
  type_url: ".git/hooks/pre-applypatch.sample"
  value: "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n# appropriate message if it wants to stop the commit.\n#\n# To enable this hook, rename this file to \"pre-applypatch\".\n\n. git-sh-setup\nprecommit=\"$(git rev-parse --git-path hooks/pre-commit)\"\ntest -x \"$precommit\" && exec \"$precommit\" ${1+\"$@\"}\n:\n"
}
files {
  type_url: ".git/hooks/pre-push.sample"
  value: "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n# $1 -- Name of the remote to which the push is being done\n# $2 -- URL to which the push is being done\n#\n# If pushing without using a named remote those arguments will be equal.\n#\n# Information about the commits which are being pushed is supplied as lines to\n# the standard input in the form:\n#\n#   <local ref> <local sha1> <remote ref> <remote sha1>\n#\n# This sample shows how to prevent push of commits where the log message starts\n# with \"WIP\" (work in progress).\n\nremote=\"$1\"\nurl=\"$2\"\n\nz40=0000000000000000000000000000000000000000\n\nwhile read local_ref local_sha remote_ref remote_sha\ndo\n\tif [ \"$local_sha\" = $z40 ]\n\tthen\n\t\t# Handle delete\n\t\t:\n\telse\n\t\tif [ \"$remote_sha\" = $z40 ]\n\t\tthen\n\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_sha\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_sha..$local_sha\"\n\t\tfi\n\n\t\t# Check for WIP commit\n\t\tcommit=`git rev-list -n 1 --grep \'^WIP\' \"$range\"`\n\t\tif [ -n \"$commit\" ]\n\t\tthen\n\t\t\techo >&2 \"Found WIP commit in $local_ref, not pushing\"\n\t\t\texit 1\n\t\tfi\n\tfi\ndone\n\nexit 0\n"
}
files {
  type_url: ".git/hooks/update.sample"
  value: "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n#\n# Config\n# ------\n# hooks.allowunannotated\n#   This boolean sets whether unannotated tags will be allowed into the\n#   repository.  By default they won\'t be.\n# hooks.allowdeletetag\n#   This boolean sets whether deleting tags will be allowed in the\n#   repository.  By default they won\'t be.\n# hooks.allowmodifytag\n#   This boolean sets whether a tag may be modified after creation. By default\n#   it won\'t be.\n# hooks.allowdeletebranch\n#   This boolean sets whether deleting branches will be allowed in the\n#   repository.  By default they won\'t be.\n# hooks.denycreatebranch\n#   This boolean sets whether remotely creating branches will be denied\n#   in the repository.  By default this is allowed.\n#\n\n# --- Command line\nrefname=\"$1\"\noldrev=\"$2\"\nnewrev=\"$3\"\n\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don\'t run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\nfi\n\nif [ -z \"$refname\" -o -z \"$oldrev\" -o -z \"$newrev\" ]; then\n\techo \"usage: $0 <ref> <oldrev> <newrev>\" >&2\n\texit 1\nfi\n\n# --- Config\nallowunannotated=$(git config --bool hooks.allowunannotated)\nallowdeletebranch=$(git config --bool hooks.allowdeletebranch)\ndenycreatebranch=$(git config --bool hooks.denycreatebranch)\nallowdeletetag=$(git config --bool hooks.allowdeletetag)\nallowmodifytag=$(git config --bool hooks.allowmodifytag)\n\n# check for no description\nprojectdesc=$(sed -e \'1q\' \"$GIT_DIR/description\")\ncase \"$projectdesc\" in\n\"Unnamed repository\"* | \"\")\n\techo \"*** Project description file hasn\'t been set\" >&2\n\texit 1\n\t;;\nesac\n\n# --- Check types\n# if $newrev is 0000...0000, it\'s a commit to delete a ref.\nzero=\"0000000000000000000000000000000000000000\"\nif [ \"$newrev\" = \"$zero\" ]; then\n\tnewrev_type=delete\nelse\n\tnewrev_type=$(git cat-file -t $newrev)\nfi\n\ncase \"$refname\",\"$newrev_type\" in\n\trefs/tags/*,commit)\n\t\t# un-annotated tag\n\t\tshort_refname=${refname##refs/tags/}\n\t\tif [ \"$allowunannotated\" != \"true\" ]; then\n\t\t\techo \"*** The un-annotated tag, $short_refname, is not allowed in this repository\" >&2\n\t\t\techo \"*** Use \'git tag [ -a | -s ]\' for tags you want to propagate.\" >&2\n\t\t\texit 1\n\t\tfi\n\t\t;;\n\trefs/tags/*,delete)\n\t\t# delete tag\n\t\tif [ \"$allowdeletetag\" != \"true\" ]; then\n\t\t\techo \"*** Deleting a tag is not allowed in this repository\" >&2\n\t\t\texit 1\n\t\tfi\n\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag \'$refname\' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n\t\t\texit 1\n\t\tfi\n\t\t;;\n\trefs/heads/*,commit)\n\t\t# branch\n\t\tif [ \"$oldrev\" = \"$zero\" -a \"$denycreatebranch\" = \"true\" ]; then\n\t\t\techo \"*** Creating a branch is not allowed in this repository\" >&2\n\t\t\texit 1\n\t\tfi\n\t\t;;\n\trefs/heads/*,delete)\n\t\t# delete branch\n\t\tif [ \"$allowdeletebranch\" != \"true\" ]; then\n\t\t\techo \"*** Deleting a branch is not allowed in this repository\" >&2\n\t\t\texit 1\n\t\tfi\n\t\t;;\n\trefs/remotes/*,commit)\n\t\t# tracking branch\n\t\t;;\n\trefs/remotes/*,delete)\n\t\t# delete tracking branch\n\t\tif [ \"$allowdeletebranch\" != \"true\" ]; then\n\t\t\techo \"*** Deleting a tracking branch is not allowed in this repository\" >&2\n\t\t\texit 1\n\t\tfi\n\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n\n# --- Finished\nexit 0\n"
}
files {
  type_url: ".git/refs/heads/master"
  value: "ce1a7d896a438514c6015e906fa81b7665db278b\n"
}
files {
  type_url: ".git/refs/remotes/origin/HEAD"
  value: "ref: refs/remotes/origin/master\n"
}